kind: Service
apiVersion: v1
metadata:
  name: zenoss-model-ingest
  labels:
    app: zenoss-model-ingest
spec:
  ports:
    - port: 8080
      name: rest
  clusterIP: None
  selector:
    app: zenoss-model-ingest

---
kind: Deployment
apiVersion: apps/v1beta1
metadata:
  name: zenoss-model-ingest
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: zenoss-model-ingest
    spec:
      containers:
      - name: zenoss-model-ingest
        image: registry.zing.zenoss.eng/zenosszing/zenoss-model-ingest:ca7fef0c
        env:
          - name: ZENOSS_MODEL_INGEST_AUTH_DISABLED
            value: '1'
          - name: ZENOSS_MODEL_INGEST_AUTH_KEY_FILE
            value: /run/secrets/authorization_secret
          - name: ZENOSS_MODEL_INGEST_HTTP_PORT
            value: '8080'
          - name: ZENOSS_MODEL_INGEST_KAFKA_BROKERS
            value: kafka:9092
          - name: ZENOSS_MODEL_INGEST_SCHEMAREGISTRY
            value: http://kafka-schema-registry:8081/
          - name: ZENOSS_MODEL_INGEST_TRACING_ENABLED
            value: '0'
        ports:
        - containerPort: 8080
          name: rest
        volumeMounts:
        - name: authorization-secret
          mountPath: /run/secrets
      initContainers:
      - name: pipeline-init
        image: registry.zing.zenoss.eng/zenosszing/model-ingest-pipeline-initializer:7c2320a9
      volumes:
      - name: authorization-secret
        secret:
          secretName: authorization
          items: 
          - key: value
            path: authorization_secret

---
kind: Ingress
apiVersion: extensions/v1beta1
metadata: 
  name: zenoss-model-ingest
  annotations: 
    kubernetes.io/ingress.class: traefik
    traefik.frontend.rule.type: PathPrefix
  labels:
    tier: service
spec:
  rules:
  - http: 
      paths:
      - path: /api/model/ingest
        backend: 
          serviceName: zenoss-model-ingest
          servicePort: 8080

